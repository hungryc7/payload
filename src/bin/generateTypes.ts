/* eslint-disable no-nested-ternary */
import { compile } from 'json-schema-to-typescript';
import { fieldIsPresentationalOnly, fieldAffectsData } from '../fields/config/types';
import { SanitizedCollectionConfig } from '../collections/config/types';
import loadConfig from '../config/load';

function collectionToJsonSchema(collection: SanitizedCollectionConfig): any {
  return {
    title: collection.labels.singular,
    type: 'object',
    properties: Object.fromEntries(
      collection.fields.reduce((properties, field) => {
        let type;

        switch (field.type) {
          case 'number': {
            type = { type: 'integer ' };
            break;
          }

          case 'text': {
            type = { type: 'string' };
            break;
          }

          default: {
            break;
          }
        }

        let default_ = {};

        if (!fieldIsPresentationalOnly(field)) {
          default_ = { default: field.defaultValue };
        }

        if (type && fieldAffectsData(field)) {
          return [
            ...properties,
            [
              field.name,
              {
                ...type,
                ...default_,
              },
            ],
          ];
        }

        return properties;
      }, []),
    ),
    required: collection.fields
      .filter((field) => fieldAffectsData(field) && field.required === true)
      .map((field) => fieldAffectsData(field) && field.name),
    additionalProperties: false,
  };
}

function configToJsonSchema(collections: SanitizedCollectionConfig[]): any {
  return {
    definitions: Object.fromEntries(
      collections.map((collection) => [
        collection.slug,
        collectionToJsonSchema(collection),
      ]),
    ),
    additionalProperties: false,
  };
}

export function generateTypes(): void {
  const config = loadConfig();

  console.log('compiling ts types');
  const jsonSchema = configToJsonSchema(config.collections);

  compile(jsonSchema, 'Config', {
    bannerComment: '// auto-generated by payload',
    unreachableDefinitions: true,
  }).then((compiled) => {
    // fse.writeFileSync('generated-types.ts', compiled);
    console.log('compiled', compiled);
  });
}

// when build.js is launched directly
if (module.id === require.main.id) {
  generateTypes();
}


// const result = await compile(jsonSchema, 'Config', {
//   bannerComment: '// auto-generated by payload',
//   unreachableDefinitions: true,
// });

// await fse.writeFile('generated-types.ts', result);
