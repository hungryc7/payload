{"version":3,"sources":["../../../../../src/client/components/layout/StickOnScroll/index.js"],"names":["mapStateToProps","scrollPos","state","common","StickOnScroll","props","bounds","stuck","setState","stick","getBoundingClientRect","prevProps","prevState","newBounds","spacer","top","el","children","height","Component"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB;AAAA,SAAU;AAChCC,eAAWC,MAAMC,MAAN,CAAaF;AADQ,GAAV;AAAA,CAAxB;;IAIMG,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAMA,KAAN;AAEA,UAAKH,KAAL,GAAa;AACXI,cAAQ,KADG;AAEXC,aAAO;AAFI,KAAb;AAHiB;AAOlB;;;;wCAEmB;AAClB,WAAKC,QAAL,CAAc;AACZF,gBAAQ,KAAKG,KAAL,CAAWC,qBAAX;AADI,OAAd;AAGD;;;uCAEkBC,S,EAAWC,S,EAAW;AACvC,UAAMC,YAAY,KAAKC,MAAL,CAAYJ,qBAAZ,EAAlB;;AACA,UAAIG,UAAUE,GAAV,IAAiB,CAAjB,IAAsB,CAACH,UAAUL,KAArC,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AACZD,iBAAO;AADK,SAAd;AAGD;;AAED,UAAIM,UAAUE,GAAV,IAAiB,CAAjB,IAAsBH,UAAUL,KAApC,EAA2C;AACzC,aAAKC,QAAL,CAAc;AACZD,iBAAO;AADK,SAAd;AAGD;AACF;;;6BAEQ;AAAA;;AACP,aACE;AAAK,mBAAU;AAAf,SACE;AACE,kCAAmB,KAAKL,KAAL,CAAWK,KAAX,GAAmB,QAAnB,GAA8B,EAAjD,CADF;AAEE,aAAK,aAACS,EAAD,EAAQ;AAAE,iBAAKP,KAAL,GAAaO,EAAb;AAAkB;AAFnC,SAGE;AAAK,mBAAU;AAAf,SACG,KAAKX,KAAL,CAAWY,QADd,CAHF,CADF,EAQE;AACE,mBAAU,QADZ;AAEE,eAAO;AAAEC,4BAAW,KAAKhB,KAAL,CAAWI,MAAX,CAAkBY,MAA7B;AAAF,SAFT;AAGE,aAAK,aAACF,EAAD,EAAQ;AAAE,iBAAKF,MAAL,GAAcE,EAAd;AAAmB;AAHpC,QARF,CADF;AAgBD;;;;EAhDyBG,gB;;eAmDb,yBAAQnB,eAAR,EAAyBI,aAAzB,C","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport './index.css';\n\nconst mapStateToProps = state => ({\n  scrollPos: state.common.scrollPos\n});\n\nclass StickOnScroll extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bounds: false,\n      stuck: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      bounds: this.stick.getBoundingClientRect()\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const newBounds = this.spacer.getBoundingClientRect();\n    if (newBounds.top <= 0 && !prevState.stuck) {\n      this.setState({\n        stuck: true\n      });\n    }\n\n    if (newBounds.top >= 0 && prevState.stuck) {\n      this.setState({\n        stuck: false\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"stick-on-scroll\">\n        <div\n          className={`stick${this.state.stuck ? ' stuck' : ''}`}\n          ref={(el) => { this.stick = el; } }>\n          <div className=\"wrap\">\n            {this.props.children}\n          </div>\n        </div>\n        <div\n          className=\"spacer\"\n          style={{ height: `${this.state.bounds.height}px` }}\n          ref={(el) => { this.spacer = el; } }>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(StickOnScroll);\n"],"file":"index.js"}