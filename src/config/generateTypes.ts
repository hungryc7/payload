/* eslint-disable no-nested-ternary */
/* eslint-disable no-use-before-define */
import { compile } from 'json-schema-to-typescript';
// import fse from 'fs-extra';
import { CollectionConfig, SanitizedCollectionConfig } from '../collections/config/types';
import { SanitizedConfig } from './types';

export function generateTypes(sanitizedConfig: SanitizedConfig): void {
  console.log('compiling ts types');
  const jsonSchema = configToJsonSchema(sanitizedConfig.collections);

  compile(jsonSchema, 'Config', {
    bannerComment: '// auto-generated by payload',
    unreachableDefinitions: true,
  }).then((compiled) => {
    // fse.writeFileSync('generated-types.ts', compiled);
    console.log('compiled', compiled);
  });
}

function collectionToJsonSchema(
  collection: CollectionConfig,
  slugToLabel: Record<string, string>,
): any {
  return {
    title: collection.labels.singular,
    type: 'object',
    properties: Object.fromEntries(
      collection.fields.map((field) => {
        const type = field.type === 'number'
          ? { type: 'integer' }
          : field.type === 'relationship'
            ? {
              $ref: `#/definitions/${slugToLabel[field.relationTo as string]}`,
            }
            : { type: 'string' };
        const enum_ = field.type === 'select' ? { enum: field.options } : {};
        const default_ = field.defaultValue ? { default: field.defaultValue } : {};

        return [
          field.name,
          {
            ...type,
            ...enum_,
            ...default_,
          },
        ];
      }),
    ),
    required: collection.fields
      .filter((field) => field.required === true)
      .map((field) => field.name),
    additionalProperties: false,
  };
}

function configToJsonSchema(collections: SanitizedCollectionConfig[]): any {
  const slugToLabel = Object.fromEntries(
    collections.map((collection) => [
      collection.slug,
      collection.labels.singular,
    ]),
  );
  return {
    definitions: Object.fromEntries(
      collections.map((collection) => [
        collection.labels.singular,
        collectionToJsonSchema(collection, slugToLabel),
      ]),
    ),
    additionalProperties: false,
  };
}

// const result = await compile(jsonSchema, 'Config', {
//   bannerComment: '// auto-generated by payload',
//   unreachableDefinitions: true,
// });

// await fse.writeFile('generated-types.ts', result);
