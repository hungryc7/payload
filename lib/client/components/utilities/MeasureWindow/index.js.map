{"version":3,"sources":["../../../../../src/client/components/utilities/MeasureWindow/index.js"],"names":["mapStateToProps","windowWidth","state","common","windowHeight","mapDispatchToProps","setWindowSize","size","dispatch","type","payload","MeasureWindow","setSize","bind","onResize","props","width","window","innerWidth","height","innerHeight","mobileWidth","addEventListener","delay","setTimeout","Component"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB;AAAA,SAAU;AAChCC,iBAAaC,MAAMC,MAAN,CAAaF,WADM;AAEhCG,kBAAcF,MAAMC,MAAN,CAAaC;AAFK,GAAV;AAAA,CAAxB;;AAKA,IAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,SAAa;AACtCC,mBAAe,uBAACC,IAAD;AAAA,aAAUC,SAAS;AAAEC,cAAM,iBAAR;AAA2BC,iBAASH;AAApC,OAAT,CAAV;AAAA;AADuB,GAAb;AAAA,CAA3B;;IAIMI,a;;;;;AACJ,2BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,uDAAf;AACA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcD,IAAd,uDAAhB;AAHY;AAIb;;;;8BAES;AACR,WAAKE,KAAL,CAAWT,aAAX,CAAyB;AACvBU,eAAOC,OAAOC,UADS;AAEvBC,gBAAQF,OAAOG;AAFQ,OAAzB;AAID;;;+BAEU;AACT;AACA;AACA,UAAMC,cAAc,GAApB;;AAEA,UAAIJ,OAAOC,UAAP,GAAoBG,WAAxB,EAAqC;AACnC,aAAKT,OAAL;AACD;AACF;;;wCAEmB;AAAA;;AAClBK,aAAOK,gBAAP,CAAwB,QAAxB,EAAkC,KAAKR,QAAvC;AAEAG,aAAOK,gBAAP,CAAwB,mBAAxB,EAA6C,YAAM;AACjD,YAAMC,QAAQ,GAAd;AACAC,mBAAW,YAAM;AACf,iBAAKZ,OAAL;AACD,SAFD,EAEGW,KAFH;AAGD,OALD;AAOA,WAAKX,OAAL;AACD;;;6BAEQ;AACP,aAAO,KAAP;AACD;;;;EAvCyBa,gB;;eA0Cb,yBAAQzB,eAAR,EAAyBK,kBAAzB,EAA6CM,aAA7C,C","sourcesContent":["import { Component } from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n  windowWidth: state.common.windowWidth,\n  windowHeight: state.common.windowHeight\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setWindowSize: (size) => dispatch({ type: 'SET_WINDOW_SIZE', payload: size }),\n});\n\nclass MeasureWindow extends Component {\n  constructor() {\n    super();\n    this.setSize = this.setSize.bind(this);\n    this.onResize = this.onResize.bind(this);\n  }\n\n  setSize() {\n    this.props.setWindowSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  onResize() {\n    // Only resize on screens larger than mobile\n    // To avoid toolbars hiding and orientation change\n    const mobileWidth = 450;\n\n    if (window.innerWidth > mobileWidth) {\n      this.setSize();\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.onResize);\n\n    window.addEventListener('orientationchange', () => {\n      const delay = 500;\n      setTimeout(() => {\n        this.setSize();\n      }, delay);\n    });\n\n    this.setSize();\n  }\n\n  render() {\n    return false;\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MeasureWindow);\n"],"file":"index.js"}