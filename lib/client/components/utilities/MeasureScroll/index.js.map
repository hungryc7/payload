{"version":3,"sources":["../../../../../src/client/components/utilities/MeasureScroll/index.js"],"names":["mapStateToProps","scrollPercentage","state","common","scrollPos","mapDispatchToProps","updateScroll","pos","dispatch","type","payload","updateScrollPercentage","percentage","MeasureScroll","props","window","history","scrollRestoration","ticking","latestKnownScrollY","onScroll","roundedPercent","roundedDecimal","pageYOffset","document","body","scrollHeight","innerHeight","toFixed","requestTick","requestAnimationFrame","addEventListener","Component"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB;AAAA,SAAU;AAChCC,sBAAkBC,MAAMC,MAAN,CAAaF,gBADC;AAEhCG,eAAWF,MAAMC,MAAN,CAAaC;AAFQ,GAAV;AAAA,CAAxB;;AAKA,IAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,SAAa;AACtCC,kBAAc,sBAACC,GAAD;AAAA,aAASC,SAAS;AAAEC,cAAM,eAAR;AAAyBC,iBAASH;AAAlC,OAAT,CAAT;AAAA,KADwB;AAEtCI,4BAAyB,gCAACC,UAAD;AAAA,aAAgBJ,SAAS;AAAEC,cAAM,0BAAR;AAAoCC,iBAASE;AAA7C,OAAT,CAAhB;AAAA;AAFa,GAAb;AAAA,CAA3B;;IAKMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAMA,KAAN;;AAEA,QAAI,uBAAuBC,OAAOC,OAAlC,EAA2C;AACzCD,aAAOC,OAAP,CAAeC,iBAAf,GAAmC,QAAnC;AACD,KALgB,CAOjB;;;AACA,QAAIC,UAAU,KAAd;AACA,QAAIC,qBAAqB,CAAzB;AACA,QAAIlB,mBAAmB,CAAvB;;AAEA,UAAKK,YAAL,GAAoB,YAAM;AACxBY,gBAAU,KAAV;;AACA,YAAKJ,KAAL,CAAWR,YAAX,CAAwBa,kBAAxB;;AACA,YAAKL,KAAL,CAAWH,sBAAX,CAAkCV,gBAAlC;AACD,KAJD;;AAMA,UAAKmB,QAAL,GAAgB,YAAM;AACpB,UAAMC,iBAAiB,GAAvB;AACA,UAAMC,iBAAiB,CAAvB;AACAH,2BAAqBJ,OAAOQ,WAA5B;AACAtB,yBAAmB,CAACkB,sBAAsBK,SAASC,IAAT,CAAcC,YAAd,GAA6BX,OAAOY,WAA1D,IAAyEN,cAA1E,EAA0FO,OAA1F,CAAkGN,cAAlG,CAAnB;;AACA,YAAKO,WAAL;AACD,KAND;;AAQA,UAAKA,WAAL,GAAmB,YAAM;AACvB,UAAI,CAACX,OAAL,EAAc;AACZY,8BAAsB,MAAKxB,YAA3B;AACD;;AACDY,gBAAU,IAAV;AACD,KALD;;AA1BiB;AAgClB;;;;wCAEmB;AAClBH,aAAOgB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKX,QAAvC,EAAiD,KAAjD;AACD;;;6BAEQ;AACP,aAAO,IAAP;AACD;;;;EAzCyBY,gB;;eA4Cb,yBAAQhC,eAAR,EAAyBK,kBAAzB,EAA6CQ,aAA7C,C","sourcesContent":["import { Component } from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n  scrollPercentage: state.common.scrollPercentage,\n  scrollPos: state.common.scrollPos\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateScroll: (pos) => dispatch({ type: 'UPDATE_SCROLL', payload: pos }),\n  updateScrollPercentage : (percentage) => dispatch({ type: 'UPDATE_SCROLL_PERCENTAGE', payload: percentage })\n});\n\nclass MeasureScroll extends Component {\n  constructor(props) {\n    super(props);\n\n    if ('scrollRestoration' in window.history) {\n      window.history.scrollRestoration = 'manual';\n    }\n\n    // Throttle scroll event\n    let ticking = false;\n    let latestKnownScrollY = 0;\n    let scrollPercentage = 0;\n\n    this.updateScroll = () => {\n      ticking = false;\n      this.props.updateScroll(latestKnownScrollY);\n      this.props.updateScrollPercentage(scrollPercentage);\n    };\n\n    this.onScroll = () => {\n      const roundedPercent = 100;\n      const roundedDecimal = 2;\n      latestKnownScrollY = window.pageYOffset;\n      scrollPercentage = (latestKnownScrollY / (document.body.scrollHeight - window.innerHeight) * roundedPercent).toFixed(roundedDecimal);\n      this.requestTick();\n    };\n\n    this.requestTick = () => {\n      if (!ticking) {\n        requestAnimationFrame(this.updateScroll);\n      }\n      ticking = true;\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.onScroll, false);\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MeasureScroll);\n"],"file":"index.js"}